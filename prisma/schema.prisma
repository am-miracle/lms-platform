// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  title String @db.String
  description String? @db.String
  imageUrl String? @db.String
  price Float?
  isPublished Boolean @default(false)

  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String? @db.ObjectId

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  course Course[]
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String @db.String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @db.String
  description String?  @db.String
  videoUrl String? @db.String
  position Int
  isPublished Boolean @default(false )
  isFree Boolean @default(false )

  muxData MuxData?

  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  assetId String @db.String
  playbackId String? @db.String

  chapterId String @unique @db.ObjectId
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  isCompleted Boolean @default(false)

  chapterId String @db.ObjectId
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  price Float
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique

  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}